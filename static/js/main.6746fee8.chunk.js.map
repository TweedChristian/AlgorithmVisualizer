{"version":3,"sources":["util/dataGeneration.util.js","util/colorsSchemes.enum.js","util/appendArrow.util.js","util/algorithms.util.js","util/renderer.util.js","graphing/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["dataGenerator","singleLinkCycleDirectedGraph","number","nodes","links","i","id","neighbors","push","source","target","doubleLinkCycleDirectedGraph","completeGraph","j","randomGraph","max","n","edgeNumber","Math","ceil","random","floor","randomDAG","dagOptions","width","height","minWidth","maxWidth","minHeight","maxHeight","percentPerEdge","defaultRandomDAGOptions","nodesCounter","counter","k","colors","warm","viridis","cividis","inferno","magma","cool","plasma","addArrowToLines","params","markerBoxHeight","lineWidth","markerBoxWidth","refX","refY","markerWidth","markerHeight","arrowPoints","svg","append","attr","nodeRadius","line","color","style","algorithms","bfs","graph","Object","values","forEach","node","touched","layers","layerCounter","length","neighbor","pop","defaultOptions","options","svgWidth","svgHeight","directed","undefined","renderBFS","layer","index","d3","select","renderData","data","call","zoom","extent","scaleExtent","on","transform","selectAll","enter","d","results","parentNode","clickNode","circles","text","force","distance","strength","x","y","Graph","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6746fee8.chunk.js","sourcesContent":["const maxSubsetOfEdges = (n) => {\n    return Math.floor(n * (n - 1) / 2);\n}\n\nconst defaultRandomDAGOptions = (dagOptions) => {\n    dagOptions = !!dagOptions ? dagOptions : {\n        minWidth: 1,\n        maxWidth: 5,\n        minHeight: 3,\n        maxHeight: 5,\n        percentPerEdge: 0.3\n    };\n\n    dagOptions.minWidth = !!dagOptions.minWidth ? dagOptions.minWidth : 1;\n    dagOptions.maxWidth = !!dagOptions.maxWidth ? dagOptions.maxWidth : 5;\n    dagOptions.minHeight = !!dagOptions.minHeight ? dagOptions.minHeight : 3;\n    dagOptions.maxHeight = !!dagOptions.maxHeight ? dagOptions.maxHeight : 5;\n    dagOptions.percentPerEdge = !!dagOptions.percentPerEdge ? dagOptions.percentPerEdge : 0.3;\n\n    return dagOptions;\n}\n\nconst doubleLinkCycleDirectedGraph = (number) => {\n    let nodes = {};\n    let links = [];\n    for (let i = 1; i <= number; i++) {\n        nodes[i] = {\n            id: i,\n            neighbors: []\n        }\n        links.push({\n            source: i,\n            target: i % number + 1\n        });\n        links.push({\n            source: i % number + 1,\n            target: i\n        });\n        nodes[i].neighbors.push(i % number + 1);\n        //Todo backwards neighbor values\n    }\n    return {\n        nodes,\n        links\n    };\n};\n\nconst singleLinkCycleDirectedGraph = (number) => {\n    let nodes = {};\n    let links = [];\n    for (let i = 1; i <= number; i++) {\n        nodes[i] = {\n            id: i,\n            neighbors: []\n        }\n        links.push({\n            source: i,\n            target: i % number + 1\n        });\n        nodes[i].neighbors.push(i % number + 1);\n    }\n    return {\n        nodes,\n        links\n    };\n}\n\nconst completeGraph = (number) => {\n    let nodes = {};\n    let links = [];\n    for (let i = 1; i <= number; i++) {\n        nodes[i] = {\n            id: i,\n            neighbors: []\n        }\n        for(let j = i + 1; j <= number; j++){\n            links.push({\n                source: i,\n                target: j\n            });\n            nodes[i].neighbors.push(j);\n        }\n    }\n    return {\n        nodes,\n        links\n    };\n}\n\nconst randomGraph = (max) => {\n    let nodes = {};\n    let links = [];\n    const edgeNumber = Math.ceil(Math.random() * maxSubsetOfEdges(max));\n    for(let i = 1; i <= max; i++){\n        nodes[i] = {\n            id: i,\n            neighbors: []\n        };\n    }\n    for(let i = 0; i < edgeNumber; i++){\n        let source = Math.ceil(Math.random() * max);\n        let target = Math.ceil(Math.random() * max);\n        links.push({\n            source: source,\n            target: target\n        });\n        nodes[source].neighbors.push(target);\n    }\n    return {\n        nodes,\n        links\n    };\n}\n\n//Source: https://stackoverflow.com/questions/12790337/generating-a-random-dag\nconst randomDAG = (dagOptions) => {\n    dagOptions = defaultRandomDAGOptions(dagOptions);\n    let nodes = {};\n    let links = [];\n\n    const height = dagOptions.minHeight + Math.ceil(Math.random() * (dagOptions.maxHeight - dagOptions.minHeight));\n    let width;\n    let nodesCounter = 0;\n    for(let i=0; i< height; i++){\n        width = dagOptions.minWidth + Math.ceil(Math.random() + (dagOptions.maxWidth - dagOptions.minWidth));\n\n        for(let counter = nodesCounter; counter < nodesCounter + width; counter++ ){\n            nodes[counter + 1] = {\n                id: counter + 1,\n                neighbors: []\n            }\n        }\n\n        for(let j=0; j < nodesCounter; j++){\n            for(let k = 0; k < width; k++){\n                //Add edge\n                if(Math.random() >= dagOptions.percentPerEdge && (j+1) !== (k + nodesCounter)){\n                    links.push({\n                        source: j + 1,\n                        target: k + nodesCounter\n                    });\n                    nodes[j + 1].neighbors.push(k + nodesCounter);\n                }\n            }\n        }\n        nodesCounter += width;\n    }\n    \n    return {\n        nodes,\n        links\n    };\n}\n\nconst dataGenerator = {\n    singleLinkCycleDirectedGraph,\n    doubleLinkCycleDirectedGraph,\n    completeGraph,\n    randomGraph,\n    randomDAG\n};\n\nexport default dataGenerator;","const colors = {\n    warm: [\"#9e0142\",\"#d53e4f\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#ffffbf\",\"#e6f598\",\"#abdda4\",\"#66c2a5\",\"#3288bd\",\"#5e4fa2\"],\n    viridis: [\"#440154\",\"#482475\",\"#414487\",\"#355f8d\",\"#2a788e\",\"#21918c\",\"#22a884\",\"#44bf70\",\"#7ad151\",\"#bddf26\",\"#fde725\"],\n    cividis: [\"#002051\",\"#0a326a\",\"#2b446e\",\"#4d566d\",\"#696970\",\"#7f7c75\",\"#948f78\",\"#ada476\",\"#caba6a\",\"#ead156\",\"#fdea45\"],\n    inferno: [\"#000004\",\"#160b39\",\"#420a68\",\"#6a176e\",\"#932667\",\"#bc3754\",\"#dd513a\",\"#f37819\",\"#fca50a\",\"#f6d746\",\"#fcffa4\"],\n    magma: [\"#000004\",\"#140e36\",\"#3b0f70\",\"#641a80\",\"#8c2981\",\"#b73779\",\"#de4968\",\"#f7705c\",\"#fe9f6d\",\"#fecf92\",\"#fcfdbf\"],\n    cool: [\"#6e40aa\",\"#6054c8\",\"#4c6edb\",\"#368ce1\",\"#23abd8\",\"#1ac7c2\",\"#1ddfa3\",\"#30ef82\",\"#52f667\",\"#7ff658\",\"#aff05b\"],\n    plasma: [\"#0d0887\",\"#41049d\",\"#6a00a8\",\"#8f0da4\",\"#b12a90\",\"#cc4778\",\"#e16462\",\"#f2844b\",\"#fca636\",\"#fcce25\",\"#f0f921\"]\n}\nexport default colors;","import {line} from 'd3';\n\nconst addArrowToLines = (params) => {\n    let markerBoxHeight = 10 + (2 * params.lineWidth);\n    let markerBoxWidth = 10 + (2 * params.lineWidth);\n    let refX = markerBoxWidth / 2;\n    let refY = markerBoxHeight / 2;\n    let markerWidth = markerBoxWidth / 2 + (2 * params.lineWidth);\n    let markerHeight = markerBoxHeight / 2 + (2 * params.lineWidth);\n    let arrowPoints = [[0, 0], [0, markerBoxHeight], [markerBoxWidth, Math.ceil(markerHeight / 2)]];\n\n    params.svg.append('defs')\n    .append('marker')\n    .attr('id', 'arrow')\n    .attr('viewBox', `0 0 ${markerBoxWidth} ${markerBoxHeight}`)\n    .attr('refX', refX + (2 * params.lineWidth) + (2 * params.nodeRadius))\n    .attr('refY', refY - params.lineWidth)\n    .attr('orient', 'auto-start-reverse')\n    .attr('markerWidth', markerWidth) \n    .attr('markerHeight', markerHeight)\n    .attr('xoverflow', 'visible')\n    .append('svg:path')\n    .attr('d', line()(arrowPoints))\n    .attr('fill', params.color)\n    .style('stroke','none');\n\n    \n\n    // select(svg)\n    // .append('defs')\n    // .append('marker')\n    // .attr('id', 'arrow')\n    // .attr('viewBox', [0,0, markerBoxWidth, markerBoxHeight])\n    // .attr('refX', refX)\n    // .attr('refY', refY)\n    // .attr('orient', 'auto-start-reverse')\n    // .attr('markerWidth', markerWidth)\n    // .attr('markerHeight', markerHeight)\n    // .attr('xoverflow', 'visible')\n    // .append('svg:path')\n    // .attr('d', line()(arrowPoints))\n    // .attr('fill', '#999')\n    // .style('stroke','#999');\n    // {'id':'arrow',\n    //     'viewBox':'-0 -5 10 10',\n    //     'refX':13,\n    //     'refY':0,\n    //     'orient':'auto',\n    //     'markerWidth':13,\n    //     'markerHeight':13,\n    //     'xoverflow':'visible'}\n        // .append('svg:path')\n        // .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n        // .attr('fill', '#999')\n        // .style('stroke','none');\n    // select(svg).selectAll('line').attr('marker-end', 'url(#arrow)').style('stroke-width', 50)\n}\n\nexport default addArrowToLines;","\nconst bfs = (graph, id) => {\n    Object.values(graph.nodes).forEach((node) => {\n        graph.nodes[node.id].touched = false;\n    });\n    graph.nodes[id].touched = true;\n    let layers = [];\n    layers[0] = [graph.nodes[id]];\n    let layerCounter = 0;\n    while(layers[layerCounter].length !== 0){\n        layers[layerCounter + 1] = [];\n        layers[layerCounter].forEach((node) => {\n            node.neighbors.forEach((neighbor) => {\n                if(!graph.nodes[neighbor].touched){\n                    graph.nodes[neighbor].touched = true;\n                    layers[layerCounter + 1].push(graph.nodes[neighbor]);\n                }\n            })\n        })\n        layerCounter++;\n    }\n    //Remove empty array at the end\n    layers.pop();\n    return layers;\n}\n\nconst algorithms = {\n    bfs\n}\n\n\nexport default algorithms","import * as force from 'd3-force';\nimport * as d3 from 'd3';\nimport * as zoom from 'd3-zoom';\nimport colors from '../util/colorsSchemes.enum';\nimport addArrowToLines from '../util/appendArrow.util';\nimport algorithms from '../util/algorithms.util';\n\n/**\n * Loads the given data, and the options to create a displayed graph.\n * Width and Height default to 500.\n * LineWidth defaults to 1 and nodeRadius defaults to 5.\n * Directed defaults to false.\n * @param data { {nodes, links} } is the displayed data\n * @param options { { svgWidth?: number, svgHeight?: number, lineWidth?: number, nodeRadius?: number, directed?: boolean } }\n */\nconst renderData = (data, options) => {\n    options = defaultOptions(options);\n\n    const ticked = () => {\n        links\n            .attr('x1', (d) => d.source.x)\n            .attr('y1', (d) => d.source.y)\n            .attr('x2', (d) => d.target.x)\n            .attr('y2', (d) => d.target.y);\n\n        circles\n            .attr('cx', (d) => d.x)\n            .attr('cy', (d) => d.y)\n\n        text.attr('x', (d) => d.x)\n        .attr('y', (d) => d.y)\n    };\n\n    const clickNode = (node) => {\n        // d3.select(node.target.parentNode)\n        // .select('circle')\n        // .style(\"stroke\", colors.cool[7])\n        // .style(\"fill\", colors.cool[7])\n        // .attr('r', options.nodeRadius + 2);\n        d3.selectAll('circle').style('fill', colors.cool[5])\n        let results = algorithms.bfs(data, node.target.parentNode.id);\n        renderBFS(results);\n    }\n\n    const svg = d3.select('#graph')\n        .attr('width', options.svgWidth)\n        .attr('height', options.svgHeight)\n        \n    addArrowToLines({\n        svg,\n        lineWidth: options.lineWidth,\n        nodeRadius: options.nodeRadius,\n        color: colors.cool[0]\n    });\n\n    const zoomed = ({transform})  => {\n        svg.selectAll('line').attr('transform', transform);\n        svg.selectAll('.node').attr('transform', transform)\n    };\n\n    svg.call(\n        zoom\n        .zoom()\n        .extent([[0,0], [500, 500]])\n        .scaleExtent([1,10])\n        .on('zoom', zoomed)\n    );\n\n    let links = svg.selectAll('line').data(data.links)\n        .enter()\n        .append('line')\n        .attr('marker-end', 'url(#arrow)')\n        .style(\"stroke\", colors.cool[0])\n        .style('stroke-width', options.lineWidth);\n\n    let nodes = svg.selectAll(\".node\")\n        .data(Object.values(data.nodes)).enter()\n        .append('g')\n        .attr('class', 'node')\n        .attr('id', (d) => d.id)\n        .on('click', (d) => clickNode(d))\n\n    let circles = nodes.append('circle')\n    .attr('r', options.nodeRadius)\n    .style('fill', colors.cool[5])\n\n    let text = nodes.append('text')\n    .attr('fill', 'white')\n    .attr('dy', '0.35em')\n    .text((d) => d.id)\n    .style(\"text-anchor\", \"middle\")\n    .attr('font-size', options.nodeRadius + 1)\n    .attr('font-weight', 'bold')\n\n    force.forceSimulation(Object.values(data.nodes))\n        .force('link',\n            force.forceLink().id((d) => d.id)\n                .links(data.links).distance(6 * options.nodeRadius)\n        )\n        .force(\"charge\", force.forceManyBody().strength(-90))\n        .force(\"center\", force.forceCenter(\n            options.svgWidth / 2, \n            options.svgHeight / 2\n        ))\n        .on(\"tick\", ticked);\n};\n\nconst defaultOptions = (options) => {\n    options = !!options ? options : {\n        svgWidth: 800,\n        svgHeight: 800,\n        lineWidth: 1,\n        nodeRadius: 5,\n        directed: true\n    };\n\n    options.svgWidth = !!options.svgWidth ? options.svgWidth : 500;\n    options.svgHeight = !!options.svgHeight ? options.svgHeight : 500;\n    options.lineWidth = !!options.lineWidth ? options.lineWidth : 1;\n    options.nodeRadius = !!options.nodeRadius ? options.nodeRadius : 5;\n    options.directed = (options.directed === undefined || options.directed === null) ? false : options.directed;\n    \n    return options;\n}\n\nconst renderBFS = (layers) => {\n    layers.forEach((layer, index) => {\n        layer.forEach((node) => {\n            d3.select('#graph')\n            .select(`[id='${node.id}']`)\n            .select('circle')\n            // .attr('stroke', colors.magma[index])\n            .style('fill', colors.magma[index])\n        })\n    });\n}\n\n//Used for arrow scaling\n//https://stackoverflow.com/questions/11121465/scaling-an-arrowhead-on-a-d3-force-layout-link-marker\n// const lineXEnd = (d, nodeRadius) => {\n//     let length = Math.sqrt(Math.pow(d.target.y - d.source.y, 2) + Math.pow(d.target.x - d.source.x, 2));\n//     let scale = (length - nodeRadius) / length;\n//     let offset = (d.target.x - d.source.x) - (d.target.x - d.source.x) * scale;\n//     return d.target.x - offset;\n// }\n\n// const lineYEnd = (d, nodeRadius) => {\n//     let length = Math.sqrt(Math.pow(d.target.y - d.source.y, 2) + Math.pow(d.target.x - d.source.x, 2));\n//     let scale = (length - nodeRadius) / length;\n//     let offset = (d.target.y - d.source.y) - (d.target.y - d.source.y) * scale;\n//     return d.target.y - offset;\n// }\n\nexport default renderData;\n","import React, { Component } from 'react'\nimport dataGenerator from '../util/dataGeneration.util';\nimport renderData from '../util/renderer.util';\n\n// const data = dataGenerator.randomGraph(10);\nlet data = dataGenerator.randomGraph(12);\nexport class Graph extends Component {\n    componentDidMount() {\n        renderData(data, {nodeRadius: 5, lineWidth: 1});\n    }\n    render() {\n        return (\n            <svg id=\"graph\">\n            </svg>\n        )\n    }\n}\n\nexport default Graph\n\n","import './App.css';\nimport Graph from './graphing/Graph';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Graph />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}