{"version":3,"sources":["util/colorsSchemes.enum.js","util/appendArrow.util.js","graphing/Graph.js","util/dataGeneration.util.js","App.js","reportWebVitals.js","index.js"],"names":["cool","addArrowToLines","params","markerBoxHeight","lineWidth","markerBoxWidth","refX","refY","markerWidth","markerHeight","arrowPoints","Math","ceil","svg","append","attr","nodeRadius","line","color","style","data","doubleLinkCircle","number","nodes","links","i","id","neighbors","push","source","target","completeGraph","j","randomGraph","max","floor","random","loadData","d3","selectAll","enter","Object","values","d","on","node","force","strength","x","y","Graph","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f70f05b3.chunk.js","sourcesContent":["// const colors = {\n//     'warm': [\"#9e0142\",\"#d53e4f\",\"#f46d43\",\"#fdae61\",\"#fee08b\",\"#ffffbf\",\"#e6f598\",\"#abdda4\",\"#66c2a5\",\"#3288bd\",\"#5e4fa2\"],\n//     'viridis': [\"#440154\",\"#482475\",\"#414487\",\"#355f8d\",\"#2a788e\",\"#21918c\",\"#22a884\",\"#44bf70\",\"#7ad151\",\"#bddf26\",\"#fde725\"],\n//     'cividis': [\"#002051\",\"#0a326a\",\"#2b446e\",\"#4d566d\",\"#696970\",\"#7f7c75\",\"#948f78\",\"#ada476\",\"#caba6a\",\"#ead156\",\"#fdea45\"],\n//     'inferno': [\"#000004\",\"#160b39\",\"#420a68\",\"#6a176e\",\"#932667\",\"#bc3754\",\"#dd513a\",\"#f37819\",\"#fca50a\",\"#f6d746\",\"#fcffa4\"],\n//     'magma': [\"#000004\",\"#140e36\",\"#3b0f70\",\"#641a80\",\"#8c2981\",\"#b73779\",\"#de4968\",\"#f7705c\",\"#fe9f6d\",\"#fecf92\",\"#fcfdbf\"]\n// }\n\n// const warm = [\"#6e40aa\",\"#963db3\",\"#bf3caf\",\"#e4419d\",\"#fe4b83\",\"#ff5e63\",\"#ff7847\",\"#fb9633\",\"#e2b72f\",\"#c6d63c\",\"#aff05b\"];\n// const plasma = [\"#0d0887\",\"#41049d\",\"#6a00a8\",\"#8f0da4\",\"#b12a90\",\"#cc4778\",\"#e16462\",\"#f2844b\",\"#fca636\",\"#fcce25\",\"#f0f921\"];\nconst cool = [\"#6e40aa\",\"#6054c8\",\"#4c6edb\",\"#368ce1\",\"#23abd8\",\"#1ac7c2\",\"#1ddfa3\",\"#30ef82\",\"#52f667\",\"#7ff658\",\"#aff05b\"];\nexport default cool;","import {line} from 'd3';\n\nconst addArrowToLines = (params) => {\n    let markerBoxHeight = 10 + (2 * params.lineWidth);\n    let markerBoxWidth = 10 + (2 * params.lineWidth);\n    let refX = markerBoxWidth / 2;\n    let refY = markerBoxHeight / 2;\n    let markerWidth = markerBoxWidth / 2 + (2 * params.lineWidth);\n    let markerHeight = markerBoxHeight / 2 + (2 * params.lineWidth);\n    let arrowPoints = [[0, 0], [0, markerBoxHeight], [markerBoxWidth, Math.ceil(markerHeight / 2)]];\n\n    params.svg.append('defs')\n    .append('marker')\n    .attr('id', 'arrow')\n    .attr('viewBox', `0 0 ${markerBoxWidth} ${markerBoxHeight}`)\n    .attr('refX', refX + (2 * params.lineWidth) + (2 * params.nodeRadius))\n    .attr('refY', refY - params.lineWidth)\n    .attr('orient', 'auto-start-reverse')\n    .attr('markerWidth', markerWidth) \n    .attr('markerHeight', markerHeight)\n    .attr('xoverflow', 'visible')\n    .append('svg:path')\n    .attr('d', line()(arrowPoints))\n    .attr('fill', params.color)\n    .style('stroke','none');\n\n    \n\n    // select(svg)\n    // .append('defs')\n    // .append('marker')\n    // .attr('id', 'arrow')\n    // .attr('viewBox', [0,0, markerBoxWidth, markerBoxHeight])\n    // .attr('refX', refX)\n    // .attr('refY', refY)\n    // .attr('orient', 'auto-start-reverse')\n    // .attr('markerWidth', markerWidth)\n    // .attr('markerHeight', markerHeight)\n    // .attr('xoverflow', 'visible')\n    // .append('svg:path')\n    // .attr('d', line()(arrowPoints))\n    // .attr('fill', '#999')\n    // .style('stroke','#999');\n    // {'id':'arrow',\n    //     'viewBox':'-0 -5 10 10',\n    //     'refX':13,\n    //     'refY':0,\n    //     'orient':'auto',\n    //     'markerWidth':13,\n    //     'markerHeight':13,\n    //     'xoverflow':'visible'}\n        // .append('svg:path')\n        // .attr('d', 'M 0,-5 L 10 ,0 L 0,5')\n        // .attr('fill', '#999')\n        // .style('stroke','none');\n    // select(svg).selectAll('line').attr('marker-end', 'url(#arrow)').style('stroke-width', 50)\n}\n\nexport default addArrowToLines;","import React, { Component } from 'react'\nimport * as force from 'd3-force';\nimport * as d3 from 'd3';\nimport cool from '../util/colorsSchemes.enum';\nimport addArrowToLines from '../util/appendArrow.util';\nimport dataGenerator from '../util/dataGeneration.util';\n\nconst data = dataGenerator.randomGraph(6);\nconst loadData = () => {\n    const ticked = () => {\n        links\n            .attr('x1', (d) => d.source.x)\n            .attr('y1', (d) => d.source.y)\n            .attr('x2', (d) => d.target.x)\n            .attr('y2', (d) => d.target.y);\n\n        nodes\n            .attr('cx', (d) => d.x)\n            .attr('cy', (d) => d.y)\n    };\n\n    const clickNode = (node) => {\n        d3.select(node.target).style(\"stroke\", cool[7]).style(\"fill\", cool[7]).attr('r', 4)\n    }\n\n    const svg = d3.select('#graph')\n        .attr('width', 500)\n        .attr('height', 500)\n        \n    addArrowToLines({\n        svg,\n        lineWidth: 1,\n        nodeRadius: 5,\n        color: cool[0]\n    });\n   \n    let links = svg.selectAll('line').data(data.links)\n        .enter()\n        .append('line')\n        // .attr('marker-end', 'url(#arrow)')\n        .style(\"stroke\", cool[0])\n        .style('stroke-width', 1);\n\n    let nodes = svg.selectAll(\"circle\")\n        .data(Object.values(data.nodes)).enter()\n        .append('circle')\n        .attr('r', 5)\n        .attr('id', (d) => d.id)\n        .style('fill', cool[5])\n        .on('click', (d) => clickNode(d))\n\n    force.forceSimulation(Object.values(data.nodes))\n        .force('link',\n            force.forceLink().id((d) => d.id)\n                .links(data.links)\n        )\n        .force(\"charge\", force.forceManyBody().strength(-90))\n        .force(\"center\", force.forceCenter(250, 250))\n        .on(\"tick\", ticked);\n};\n\nexport class Graph extends Component {\n    componentDidMount() {\n        loadData();\n    }\n    render() {\n        return (\n            <svg id=\"graph\">\n\n            </svg>\n        )\n    }\n}\n\nexport default Graph\n\n","const doubleLinkCircle = (number) => {\n    let nodes = {};\n    let links = [];\n    for (let i = 1; i <= number; i++) {\n        nodes[i] = {\n            id: i,\n            neighbors: []\n        }\n        links.push({\n            source: i,\n            target: i % number + 1\n        });\n        links.push({\n            source: i % number + 1,\n            target: i\n        });\n        nodes[i].neighbors.push(i % number + 1);\n    }\n    return {\n        nodes,\n        links\n    };\n};\n\nconst completeGraph = (number) => {\n    let nodes = {};\n    let links = [];\n    for (let i = 1; i <= number; i++) {\n        nodes[i] = {\n            id: i,\n            neighbors: []\n        }\n        for(let j = i + 1; j <= number; j++){\n            links.push({\n                source: i,\n                target: j\n            });\n            nodes[i].neighbors.push(j);\n        }\n    }\n    return {\n        nodes,\n        links\n    };\n}\n\nconst randomGraph = (max) => {\n    let nodes = {};\n    let links = [];\n    for(let i = 1; i <= max; i++){\n        nodes[i] = {\n            id: i,\n            neighbors: []\n        };\n        for(let j = i + 1; j <= max; j++){\n            if(Math.floor((Math.random() * 2))){\n                links.push({\n                    source: i,\n                    target: j\n                });\n                nodes[i].neighbors.push(j);\n            }\n        }\n    }\n    return {\n        nodes,\n        links\n    };\n}\n\nconst dataGenerator = {\n    doubleLinkCircle,\n    completeGraph,\n    randomGraph\n}\n\nexport default dataGenerator;","import './App.css';\nimport Graph from './graphing/Graph';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Graph />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}